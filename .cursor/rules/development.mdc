---
description: 
globs: 
alwaysApply: true
---
# Convenciones Globales de Desarrollo

## Control de Versiones (Git)

### Conventional Commits
Todos los commits deben seguir el formato de [Conventional Commits](mdc:https:/www.conventionalcommits.org) y estar en idioma ingles:

```
<tipo>[alcance opcional]: <descripción>

[cuerpo opcional]

[nota de pie opcional]
```

#### Tipos de Commit
- `feat`: Nuevas características
- `fix`: Correcciones de errores
- `docs`: Cambios en documentación
- `style`: Cambios que no afectan el código (espacios, formato, etc)
- `refactor`: Refactorización del código
- `perf`: Mejoras de rendimiento
- `test`: Añadir o corregir tests
- `chore`: Tareas de mantenimiento, cambios en build, etc
- `ci`: Cambios en integración continua
- `revert`: Revertir cambios

#### Ejemplos
```bash
feat(auth): implementar autenticación con JWT
fix(database): corregir timeout en consultas
docs(api): actualizar documentación de endpoints
```

### Versionado Semántico
Seguimos [Semantic Versioning](mdc:https:/semver.org) para el versionado de releases:

```
MAJOR.MINOR.PATCH-<alpha|beta|rc>
```

- `MAJOR`: Cambios incompatibles con versiones anteriores
- `MINOR`: Nuevas funcionalidades compatibles
- `PATCH`: Correcciones compatibles
- Sufijos para pre-releases: `-alpha.1`, `-beta.1`, `-rc.1`

#### Ejemplos
```
1.0.0 - Primera versión estable
1.1.0 - Nueva funcionalidad
1.1.1 - Corrección de bug
2.0.0 - Cambio que rompe compatibilidad
1.0.0-alpha.1 - Versión alpha
```

## Estilo de Código

### Documentación
- Todos los módulos deben tener docstrings explicando su propósito
- Las funciones públicas deben documentar:
  - Parámetros
  - Retorno
  - Excepciones
  - Ejemplos de uso

### Nombrado
- Variables y funciones: `snake_case`
- Clases: `PascalCase`
- Constantes: `UPPER_SNAKE_CASE`
- Archivos: `snake_case.ext`

### Testing
- Tests unitarios para toda nueva funcionalidad
- Nombrado de tests: `test_<funcionalidad>_<escenario>`
- Coverage mínimo: 80%

## CI/CD

### Pipelines
Cada rama debe pasar por las siguientes etapas:
1. Lint
2. Tests
3. Build
4. Deploy (según ambiente)

### Ambientes
- `development`: Desarrollo local
- `staging`: Pruebas de integración
- `production`: Producción

### Branches
- `main`: Código en producción
- `develop`: Desarrollo activo
- `feature/*`: Nuevas funcionalidades
- `fix/*`: Correcciones
- `release/*`: Preparación de release

## Seguridad

### Secretos y Configuración
- No commitear secretos ni credenciales
- Usar variables de entorno o gestores de secretos
- Documentar todas las variables de configuración

### Code Review
- Pull Requests obligatorios
- Mínimo 1 aprobación requerida
- CI debe pasar antes de merge
- No merge directo a `main`

## Monitoreo y Logging

### Logs
- Niveles de log apropiados: ERROR, WARN, INFO, DEBUG
- Incluir contexto relevante
- Formato consistente
- Timestamp en UTC

### Métricas
- Tiempo de respuesta
- Uso de recursos
- Tasa de errores
- Disponibilidad

## Performance

### Optimización
- Perfilado antes de optimizar
- Documentar benchmarks
- Monitorear métricas clave
- Optimización prematura es la raíz del mal

### Caché
- Definir política de caché
- Documentar TTL
- Monitorear hit/miss ratio

## Documentación

### README
Todo proyecto debe incluir:
- Descripción
- Requisitos
- Instalación
- Configuración
- Uso
- Contribución
- Licencia

### API
- OpenAPI/Swagger para APIs REST
- Documentar todos los endpoints
- Incluir ejemplos de request/response
- Documentar códigos de error

## Gestión de Dependencias

### Versionado
- Especificar versiones exactas
- Documentar dependencias principales
- Revisar actualizaciones de seguridad
- Mantener dependencies actualizadas

### Lock Files
- Commitear lock files
- No ignorar en .gitignore
- Actualizar con cada cambio de dependencias

## Accesibilidad y Compatibilidad

### Accesibilidad
- Seguir WCAG 2.1
- Testear con lectores de pantalla
- Asegurar navegación por teclado
- Proporcionar textos alternativos

### Compatibilidad
- Definir matriz de soporte
- Testear en múltiples ambientes
- Documentar requisitos mínimos
- Mantener compatibilidad hacia atrás 